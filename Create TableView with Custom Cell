Steps to be followed before creating a tableView programmatically.

step1: Delete Main.Storyboard 
step2:  Deleting reference to it in the project's General settting . i.e Deployment Info > Main Interface > set no value
step3: Inside the AppDelegate put only the following code
    
import UIKit
@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
  var window: UIWindow?
  func application(
    _ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions:[UIApplication.LaunchOptionsKey: Any]?
  ) -> Bool {
  // assign a new window. Here we get black screen if run the app so make it white inside the viewController.
  
  window = UIWIndow(frame: UIScreen.main.bounds)
  
  let viewController = ViewController()
  //Set rootViewController
  window?.rootViewController = viewController
  
  //make key and visible
  window?.makeKeyAndVisible()
  
  return true
  }

import UIKit
import Foundation

class ViewController: UIViewController {
let tableView = UITableView() 
//let safeArea: UILayoutGuide!

let characters = ["Rama", "Shyama", "Bhama", " Lakshmana"]
let qualifications = ["Engineering", "iOS App Developer", "HR" , "Manager"]

override func viewDidLoad() {
super.viewDidLoad()
view.backgroundColor = .white   
//safeArea = view.layoutMarginsGuide

tableView.dataSource = self

//Here we must register the cell which we want to add
//And identifier must be unique for all the cells in case of multiple cells 

tableView.register(CustomCell.self, forCellReuseIdentifier: "customCell")
setUpTableView()

}

func setUpTableView() {
view.addSubView(tableView)
tableView.translateAutoResizingMaskIntoConstraints = false

//Here top anchor is put to safeArea which is just below the topnotch 
tableView.topAnchor.constraints(equalTo: safeArea.topAnchor).isActive = true
tableView.bottomAnchor.constraints(equalTo: view.bottomAnchor).isActive = true
tableView.leadingAnchor.constraints(equalTo: view.leadingAnchor).isActive = true
tableView.trailingAnchor.constraints(equalTo: view.trailingAnchor).isActive = true

}
}
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return characters.count
  }
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = tableView.dequeueReusableCell(withIdentifier: "customCell", for: indexPath)
    guard let customCell = cell as? CustomCell else {
    return cell 
    }
    customCell.title = characters[indexPath.row]
    customCell.subTitle = qualifications[indexPath.row]
    return cell
    }
    
extension ViewController: UITableViewDataSource {

func tableView(_ tableView: UITableView , numberOfRowsInSection section: Int) -> Int {
return characters.count 
}

func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let cell = tableView.dequeReusableCell(withIdentifier: "cell", for: indexPath)
cell.textLabel?.text = characters[indexPath.row]
return cell
}
}

//Here Creating a Custom Cell 

class CustomCell : UITableViewCell {
lazy var imageVW =  UIImageView()
lazy var titleLabel = UILabel()
lazy var subTitle = UILabel()
let safeArea: UILayoutGuide!

override init(style: UITableView.CellStyle, reuseIdentifier: String) {
super.init(style: style, reuseIdentifier: reuseIdentifier)
safeArea = layoutMarginsGuide
addSubViews()
setUp()
}

//this has to be added compulsorily 

required init?(coder aDecoder: NSCoder) {
fatalError("fatal Error ......")
}

func addSubViews() {
imageVW.backgroundColor = .red
addSubView(imageVW) 
addSubView(titleLabel) 
addSubView(subTitle) 
}

func setUp {

imageVW.translateAutoResizingMaskIntoConstraints = false 

imageVW.centerYAnchor.constraints(equalTo: centerYAnchor).isActive = true
imageVW.leadingAnchor.constraints(equalTo: safeArea.leadingAnchor).isActive = true
imageVW.widthAnchor.constraints(equalToConstant: 40).isActive = true
imageVW.heighAnchor.constraints(equalToConstant: 40).isActive = true

titleLabel.translateAutoResizingMaskIntoConstraints = false 

titleLabel.leadingAnchor.constraints(equalTo: imageVW.trailingAnchor, constant: 5).isActive = true
titleLabel.topAnchor.constraints(equalToConstant: 5).isActive = true
titleLabel.trailingAnchor.constraints(equalTo: safeArea.trailingAnchor).isActive = true


subTitle.translateAutoResizingMaskIntoConstraints = false 

subTitle.leadingAnchor.constraints(equalTo:titleLabel.leadingAnchor).isActive = true
subTitle.topAnchor.constraints(equalTo:titleLabel.bottomAnchor, constant: 5).isActive = true
subTitle.bottomAnchor.constraints(equalTo:bottomAnchor, constant: 5).isActive = true
subTitle.tralijngAnchor.constraints(equalTo: trailingAnchor, constant: 5).isActive = true

}
}






